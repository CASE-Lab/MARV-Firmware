/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 36.2.0 Sat May 22 17:46:05 2021.
 */

#ifndef CT_H
#define CT_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define CT_HEARTBEAT_NCU_FRAME_ID (0x505u)
#define CT_LOG1_NCU_FRAME_ID (0x3c5u)

/* Frame lengths in bytes. */
#define CT_HEARTBEAT_NCU_LENGTH (1u)
#define CT_LOG1_NCU_LENGTH (8u)

/* Extended or standard frame types. */
#define CT_HEARTBEAT_NCU_IS_EXTENDED (0)
#define CT_LOG1_NCU_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */
#define CT_HEARTBEAT_NCU_HEARTBEAT_NCU_STATUS_ER_CHOICE (0u)
#define CT_HEARTBEAT_NCU_HEARTBEAT_NCU_STATUS_OK_CHOICE (1u)
#define CT_HEARTBEAT_NCU_HEARTBEAT_NCU_STATUS_NC_CHOICE (2u)

/**
 * Signals in message heartbeatNCU.
 *
 * All signal values are as on the CAN bus.
 */
struct ct_heartbeat_ncu_t {
    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t heartbeat_ncu_status;
};

/**
 * Signals in message log1NCU.
 *
 * Log message 1 for NCU
 *
 * All signal values are as on the CAN bus.
 */
struct ct_log1_ncu_t {
    /**
     * Current steering  angle
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t log1_ncu_angle;

    /**
     * Current steering angle commanded reference
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t log1_ncu_angle_ref;

    /**
     * Velocity estimated from angle sensor - Scaling and unit TBD
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t log1_ncu_filt_vel;

    /**
     * Velocity reported from motor driver - Scaling and unit TBD
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t log1_ncu_drv_vel;
};

/**
 * Pack message heartbeatNCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ct_heartbeat_ncu_pack(
    uint8_t *dst_p,
    const struct ct_heartbeat_ncu_t *src_p,
    size_t size);

/**
 * Unpack message heartbeatNCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ct_heartbeat_ncu_unpack(
    struct ct_heartbeat_ncu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ct_heartbeat_ncu_heartbeat_ncu_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ct_heartbeat_ncu_heartbeat_ncu_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ct_heartbeat_ncu_heartbeat_ncu_status_is_in_range(uint8_t value);

/**
 * Pack message log1NCU.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ct_log1_ncu_pack(
    uint8_t *dst_p,
    const struct ct_log1_ncu_t *src_p,
    size_t size);

/**
 * Unpack message log1NCU.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ct_log1_ncu_unpack(
    struct ct_log1_ncu_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ct_log1_ncu_log1_ncu_angle_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ct_log1_ncu_log1_ncu_angle_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ct_log1_ncu_log1_ncu_angle_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ct_log1_ncu_log1_ncu_angle_ref_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ct_log1_ncu_log1_ncu_angle_ref_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ct_log1_ncu_log1_ncu_angle_ref_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ct_log1_ncu_log1_ncu_filt_vel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ct_log1_ncu_log1_ncu_filt_vel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ct_log1_ncu_log1_ncu_filt_vel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ct_log1_ncu_log1_ncu_drv_vel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ct_log1_ncu_log1_ncu_drv_vel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ct_log1_ncu_log1_ncu_drv_vel_is_in_range(int16_t value);


#ifdef __cplusplus
}
#endif

#endif
